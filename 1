function deepClone(obj, hash = new WeakMap()) {
    // Handle null, undefined, and primitive values
    if (obj === null || typeof obj !== "object") {
        return obj;
    }

    // Handle circular references
    if (hash.has(obj)) {
        return hash.get(obj);
    }

    // Handle Date
    if (obj instanceof Date) {
        return new Date(obj);
    }

    // Handle RegExp
    if (obj instanceof RegExp) {
        return new RegExp(obj);
    }

    // Handle Arrays
    if (Array.isArray(obj)) {
        const arrCopy = [];
        hash.set(obj, arrCopy);
        obj.forEach((item, index) => {
            arrCopy[index] = deepClone(item, hash);
        });
        return arrCopy;
    }

    // Handle Objects
    const clonedObj = {};
    hash.set(obj, clonedObj);
    
    Object.keys(obj).forEach(key => {
        clonedObj[key] = deepClone(obj[key], hash);
    });
    
    return clonedObj;
}

// Example Usage
const original = {
    name: "John",
    age: 30,
    details: {
        hobbies: ["reading", "gaming"],
        address: { city: "New York", zip: "10001" }
    },
    sayHello: function () { return "Hello"; },
    createdAt: new Date(),
};

const cloned = deepClone(original);
console.log(cloned);

